name: Build and Push to GitHub Container Registry

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]  # PR builds only, no push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bigbio/pmultiqc

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        id: image-tag
        run: |
          ref="${{ github.ref }}"

          # main/master branch → latest
          if [[ "$ref" == "refs/heads/main" ]] || [[ "$ref" == "refs/heads/master" ]]; then
            echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

          # tags v* → use tag name
          elif [[ "$ref" == refs/tags/v* ]]; then
            version="${ref#refs/tags/}"
            echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${version}" >> $GITHUB_OUTPUT

          # fallback for PR builds → valid pr-<sha>
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            shortsha="${GITHUB_SHA::7}"
            echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${shortsha}" >> $GITHUB_OUTPUT

          # safety fallback → dev tag
          else
            echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./pmultiqc_service
          file: ./pmultiqc_service/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}  # only push for direct push/tag
          tags: ${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
