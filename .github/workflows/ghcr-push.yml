name: Build and Push to GitHub Container Registry

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/pmultiqc-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image (main)
      uses: docker/build-push-action@v5
      with:
        context: ./pmultiqc_service
        file: ./pmultiqc_service/Dockerfile
        platforms: linux/amd64  # Explicitly target linux/amd64 for Kubernetes
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDPLATFORM=${{ runner.os }}/${{ runner.arch }}

    - name: Build and push Docker image (simple)
      uses: docker/build-push-action@v5
      with:
        context: ./pmultiqc_service
        file: ./pmultiqc_service/Dockerfile.simple
        platforms: linux/amd64  # Explicitly target linux/amd64 for Kubernetes
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:simple
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDPLATFORM=${{ runner.os }}/${{ runner.arch }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true
